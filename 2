/* ===========================================================
|
|  
| 	 date: 2018-02-01 18:51:48
| Source code: assignment2.c 
|      Author: Guangzhuan Mo
| Student ID : 5920187
| Assignment : Program#  2  assignment 
|      Course: COP 4338 (Advanced Programming) 
|    Section : U01 
|  Instructor: William Feild 
|    Due Date: 
|    
|      I hereby certify that this collcetive work is my own 
|      and none of it is the work of any other person or entiry. 
|      _________________________________________[Guangzhuan Mo]
|
|    Language: C
| Compile/Run:
|	gcc assignment2.c -o filename
|
| +---------------------------------------------------------------
|
| Description:
|
| 	Input: no user input
|
|      Output: 	all of the perfect numbers between [1- 1000]
| 		along with  a list of their factors to confirm the factors sum to the number
|
|		formatted output:
|			Perfect number: 6 = 1 + 2 + 3;
|			Expected sqrt() of 6 = 2.4494897...
|			computted square root of 6 = 2.449489742783...
| 			reached in 8 interations
|
|     Process:
|	the program's steps are as follows:
|
| Required Features Not Included: 
|	All required features are included.
|
| Known Bugs:
| 	None;
|	the program operates correctly
|
 * ===========================================================*/

#include<stdio.h>


#define True 1
#define False 0
#define START 1
#define END 1000
 
int isPerfectNumber(int i);

int main(void){
	int i = START;
	for (i = START; i < END; i++){
		isPerfectNumber(i);	
	}
}

/*-----------------------isPerfectNumber(int )---------------------------------
 *   function: int isPerfectNumber(int i)
 *
 *    Purpose: for a given i, decide if it is a pefect number
 * 	steps:
 *		key: if number i is exactly divisible by j, j belongs to [1, i], 
 * 			then j is a factor of num
 *
 *			but for deciding if i is a perfect number, i is not included
 *			therefore, j belongs to [1, i-1]
 *
 *		after getting one factor, addup to the current sum
 *
 *              decide if the sum == i, 
 *   		if yes, return True
 * 		else return False
 *
 * @param int i, a given number between 1 to 1000
 *
 * @return  	return Ture if it is perfect number, 
 * 	 	return False if it is not a perfect nubmer.
 *
 *---------------------------------------------------------------*/

int isPerfectNumber(int i){
	int sum = 0;
	int c = 0;
	
	for (c = 1; c < i-1; c++){

		// if i is exactly divisible by c, 
		// then c is a factor of sum
		if ( i % c == 0 ){
			//printf("%d, ", c);
			sum += c;
		}
	}
	if ( sum == i){
		printf("%d ", sum);
		printf("\n");
	}
	return True;
}

/*-------------------------printPerfectNumberSeries(int i)-------------------------------
 *   function: void printPerfectNumberSeries(int i)
 *
 *    Purpose: print the output series
 *		Perfect number: i = factor1 + factor2 + ....
 *	steps:
 *		
 *
 * @param 
 *
 * @return 
 *
 *---------------------------------------------------------------*/
